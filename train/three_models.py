# -*- coding: utf-8 -*-
"""three_models.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FNqSuO0UA6DaNOgB4-5jmuFEijDzNoVK
"""

import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.neighbors import NearestNeighbors
import joblib
import numpy as np # Import numpy for sqrt

# Load and sample data
df = pd.read_csv("synthetic_tax_dataset_large.csv")

# Display basic info and check for missing values
data_summary = {
    "columns": df.columns.tolist(),
    "missing_values": df.isnull().sum().to_dict(),
    "data_types": df.dtypes.astype(str).to_dict(),
    "shape": df.shape
}

# Visualize correlations (for EDA)
plt.figure(figsize=(14, 10))
sns.heatmap(df.corr(numeric_only=True), annot=True, fmt=".2f", cmap="coolwarm")
plt.title("Correlation Heatmap")
plt.tight_layout()

# Create the directory if it doesn't exist
output_dir = "/mnt/data"
os.makedirs(output_dir, exist_ok=True)

plt.savefig(os.path.join(output_dir, "eda_correlation_heatmap.png"))
plt.close()

# Select features
features = [
    'age', 'total_income', 'salary_income', 'business_income', 'capital_gains',
    'home_loan_interest', 'education_loan_interest', 'rent_paid',
    'mutual_funds', 'fixed_deposits', 'real_estate', 'nps_contribution',
    'section_80C', 'section_80D'
]

X = df[features]
y_tax = df['estimated_tax']
y_deduction = df['total_deductions']
y_investment = df['total_investments']

# Scale the data for collaborative filtering
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split for tax estimator
X_train, X_test, y_train, y_test = train_test_split(X, y_tax, test_size=0.2, random_state=42)

# Train Random Forest for tax estimation
rf_model = RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42)
rf_model.fit(X_train, y_train)

# Evaluate tax estimator
y_pred = rf_model.predict(X_test)
tax_metrics = {
    # Calculate RMSE by taking the square root of the MSE.
    # This is necessary if the installed scikit-learn version
    # does not support the 'squared' parameter in mean_squared_error.
    "RMSE": np.sqrt(mean_squared_error(y_test, y_pred)),
    "R2": r2_score(y_test, y_pred)
}

# Save model and scaler
joblib.dump(rf_model, os.path.join(output_dir, "tax_estimator_rf.pkl"))
joblib.dump(scaler, os.path.join(output_dir, "input_scaler.pkl"))

# Collaborative filtering for deduction/investment recommendation
cf_matrix = df[features + ['total_deductions', 'total_investments']]
knn_model = NearestNeighbors(n_neighbors=5, metric='euclidean')
knn_model.fit(X_scaled)

# Save KNN model and reference matrix
joblib.dump(knn_model, os.path.join(output_dir, "cf_knn_model.pkl"))
joblib.dump(cf_matrix, os.path.join(output_dir, "cf_reference_matrix.pkl"))

{
    "data_summary": data_summary,
    "tax_model_metrics": tax_metrics,
    "files_saved": [
        "tax_estimator_rf.pkl",
        "cf_knn_model.pkl",
        "cf_reference_matrix.pkl",
        "input_scaler.pkl",
        "eda_correlation_heatmap.png"
    ]
}